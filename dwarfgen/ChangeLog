<<<<<<< HEAD
2018-09-21 David Anderson
    * dwarfgen.cc: S_IRUSR was defined incorrectly
      (when not provided by system headers). Fixed.
    * CMakeLists.txt: Updated headers list to include all 
      the local headers.
    * Makefile.am: Ensured config.h.in.cmake and
      dwarfgen.1 get into releases.
2018-09-11 David Anderson
    * ireptodbg.cc: Removed pointless comment.
2018-08-02 David Anderson
    * irepattrtodbg.cc: Fixed a typo and removed/#if 0
      some debugging code
    * Makefile.am: Removed unused variables and references
      to them.
2018-07-31 David Anderson
    * Makefile.am: Moved ChangeLog etc out of /usr/share
      but have them in the distribution. Now make install
      puts nothing of dwarfgen in /usr/local/share.
2018-07-31 David Anderson
    * createirepfrombinary.cc: Delete blank line.
    * dwarfgen.cc: Adding new option --force-empty-dnames
      to force out .debug_names section (even if empty).
      Added dwarf_transform_to_disk_form_a() which
      does the same as dwarf_transform_to_disk_form() but
      has a status as the return value and returns its
      value via a pointer arg.
    * irepattrtodbg.cc: Removing some useless whitespace.
2018-07-24 David Anderson
    * dwarfgen.cc: CallbackFunc() was awkwardly declared
      (now more sensibly declared as static function, 
      still extern "C" as it is called from C (libdwarf)) 
      ErrorHandler() was unused (now deleted).
2018-07-23 David Anderson
    * createirepformfrombinary.cc: Removed unused local variable.
      #define UNUSEDARG appropriately
    * createirepfrombinary.cc: Removed extra ';'.
      #define UNUSEDARG appropriately
      mark static functions as such to avoid warnings.
      Mark arguments UNUSEDARG where appropriate.
      Test the correct libdwarf return value.
      Delete unused local variables.
    * dwarfgen.cc: Declared functions for C callbacks
      as extern C.
      #define UNUSEDARG appropriately
    * general.h: Reformat the header comments to avoid
      too-long lines.
      Delete duplicative comments.
    * irepattrtodbg.cc: Fixed reinterpret casts to be
      the correct type which made the typedef myintptrt
      unused (and now deleted).
      #define UNUSEDARG appropriately
      Mark arguments UNUSEDARG where appropriate.
    * irepdie.h, irepform.h: Mark arguments 
      UNUSEDARG where appropriate.
    * ireptodbg.cc:Fixed reinterpret casts to be
      the correct type, fixing signed/unsigned
      comparison warnings.  Removed some unused
      local variables. Fixed a couple declarations
      to avoid signed/unsigned comparison warnings.
      #define UNUSEDARG appropriately
      Mark arguments UNUSEDARG where appropriate.
2018-07-22 David Anderson
    * dwarfgen.cc: The relocations processing was assuming
      alignment of 32bit and 64bit values. Now no longer
      makes that incorrect assumption.
2018-07-16 David Anderson
    * createirepformfrombinary.cc: Refines ifdef of HAVE_STDAFX_H
    * createirepfrombinary.cc: Refines ifdef of HAVE_STDAFX_H
      Delete unused local variable.
    * dwarfgen.cc: Refines ifdef of HAVE_STDAFX_H.
      Changes certain function_argument names to avoid
      shadowing a global. For example, elf -> elf_w
    * general.h: Remove pointless trailing ; ending IToHex()
    * irepattrtodbg.cc: Refines ifdef of HAVE_STDAFX_H.
      Rename local vars to avoid shadowing. Example: form -> form_a
    * ireptodbg.cc: Refines ifdef of HAVE_STDAFX_H.
      Rename local vars to avoid shadowing. Example: error -> lerror
2018-07-16 David Anderson
    * Makefile.am: New, used by autotools to create configure.
    * configure.ac, Makefile.in, config.h.in: Deleted.
2018-06-19  David Anderson
     * dwarfgen.cc: Now it's intended to build for Linux
       or Windows and get usable file open modes automatically.
2018-06-14  David Anderson
     * Makefile.in
     * config.h.in,configure.ac
       Removed unnecessary defines and checks.
     * configure: Regenerated
     * createirepformfrombinary.cc,createirepfrombinary.cc,
       irepattrtodbg.cc,ireptodbg.cc:
       Removed unnecessary #includes 
     * dwarfgen.cc:  Removed unnecessary #includes.
       Switch from gelf.h (GNU only) to libelf.h.
2018-06-14  David Anderson
     * Added #ifdef for Windows environment
       builds. _O_WRONLY etc for creating a file.
2018-06-13  David Anderson
     * configure.ac: New option --enable-elf-open
       setting HAVE_ELF_OPEN
     * config.h.in: HAVE_ELF_OPEN
     * configure.ac: Regenerated.
     * dwarfgen.cc.c: Now uses open() unless HAVE_ELF_OPEN
       is explicitly set.
2018-06-05  David Anderson
     * dwarfdump.c:  Change WIN32 to _WIN32.
2018-06-05  David Anderson
     * configure.ac: Now configure.in gone, using configure.ac.
     * configure: regenerated.
     * config.h.in: Regenerated, HAVE_LIBELF_LIBELF gone.
2018-06-05  David Anderson
     * dwarfgen.cc: Remove erroneous _MSC_VER
       per Carlos Alberto Enciso.
2018-05-28  David Anderson
     * createirepformfrombinary.cc,createirepfrombinary.cc,
       general.h,irepattrtodbg.cc,irepdie.h,
       irepform.h,ireppubnames.h: Removed trailing
       blank lines and updated copyright year.
=======
2019-04-22 David Anderson
     * createirepfrombinary.cc: Add test for _MSC_VER for Windows MSVC.
2019-03-07 David Anderson
     * irepdie.h: The IRAttr assignment constructor
       had a memory leak. Fixed.
     * general.h: Added #ifndef GENERAL_H to make inclusion
       idempotent.
     * ireptodbg.cc: Using new IRAattr member function
       dropFormData to ensure immediate delete of formdata_.
       Not really needed since it would eventually be
       delete-d anyway by the destructor.
2019-03-04 David Anderson
     * dwarfgen.cc: Updated the comment about the libdwarf interface
       call return values.
     * irepattrtodbg.cc: Changed the libdwarf producer function calls
       to be the newer version returning an int as that version
       is simpler to work with. The old interfaces still exist
       and work the same as always.
     * irepdie.h: setFormData() was failing to account for
       a replacement value of formdata_, which could leak
       memory.
     * ireptodbg.cc: Replaced calls to libdwarf producer that
       returned DW_DLV_NOCOUNT or DW_DLV_BADADDR with the ones
       returning an int for improved readability of the code.
       The old functions still exist and work as always but
       we're not using them here.
2019-02-18 David Anderson
     * configure.cmake: Now defines DWARF_WITH_LIBELF
       for consistency with other cmake files.
     * dwarfgen.cc: Trivial comment correction.
2019-02-12 David Anderson
     * dwarfgen.cc: The new option --add-sun-func-offsets
       tests whether the DW_AT_SUN_func_offsets data can
       be written (and later read) properly.
     * general.h: Added bool addSUNfuncoffsets.
     * irepattrtodbg.cc: Now we handle DW_FORM_CLASS_BLOCK.
     * irepform.h: Refine IRFormBlock to make it usable.
     * ireptodbg.cc: When requested, add a 
       DW_AT_SUN_func_offsets attribute to a compile unit.
2019-02-08 David Anderson
     * ireptodbg.cc: std::list<Dwarf_Unsigned> adval
       was using a non-portable initializer. Now using
       standard C++ list initializer.
2019-01-31 David Anderson
     * dwarfgen.cc,dwarfgen/ireptodbg.cc: Fixing issues
       reported by the llvm scan-build tool. 
2019-01-20 David Anderson
     * dwarfgen.cc: Remove use of uint32_t and uint64_t
       and use Dwarf_Unsigned for arithmetic.
2019-01-14 David Anderson
     * createirepfrombinary.cc: Made a partial step toward
       being able to read eh_frame, but those few lines
       are ignored for now.
     * dwarfgen.cc,general.h: Adding --add-frame-advance-loc option
       which causes testing of the new DW_CFA_advance_loc
       emitting code (better portability of the code).
     * irepframe.h: Changed index results from signed
       to unsigned. Negative values never meant anything.
     * irepresentation.h: Added code for eh_frame.
     * ireptodbg.cc: We now use the improved DW_DLV_OK
       producer calls so we changed away from allowing
       indexes to be negative, we do not need to allow
       that any longer.  Now uses the latest libdwarf
       producer calls for frame data.
       If --add-frame-advance-loc then emit particular
       values of advance_loc to test the code paths
       in the DW_CFA_advance_loc* logic.
       We create a whole new cie/fde pair for  the new
       fde testing output.
2019-01-02 David Anderson
     * ChangeLog: Renamed ChangeLog2018
     * Makefile.am: Addec ChangeLog2018 to dist files.
>>>>>>> master
